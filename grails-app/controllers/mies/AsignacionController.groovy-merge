package mies

class AsignacionController extends mies.seguridad.Shield {

    static allowedMethods = [guardarAsignacion: "POST"]

    def kerberosService

    /*TODO chequear el estado de los proyectos antes de sacar las asignaciones*/

    def asignacionesProyecto = {
        println "params " + params
        def unidad = UnidadEjecutora.get(params.id)
        def proyectos = Proyecto.findAllByUnidadEjecutora(unidad)
        def datos = []
        def fuentes = [:]
        def actual
        if (params.anio)
            actual = Anio.get(params.anio)
        else
            actual = Anio.findByAnio(new Date().format("yyyy"))
        if (!actual)
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()
        proyectos.each {proyecto ->
            fuentes.put(proyecto.id.toString(), Financiamiento.findAllByProyecto(proyecto).fuente)
            def componentes = MarcoLogico.findAll("from MarcoLogico where proyecto = ${proyecto.id} and tipoElemento = 2 and estado = 0")
            if (componentes.size() > 0) {
                def temp = new HashMap()
                temp.put("" + proyecto.id + "!" + proyecto.toStringLargo(), componentes)
                datos.add(temp)
            }

        }

        [unidad: unidad, datos: datos, fuentes: fuentes, actual: actual]


    }
    def asignacionProyecto = {
        println "params " + params
        def proyecto = Proyecto.get(params.id)
        def fuentes = Financiamiento.findAllByProyecto(proyecto).fuente
        def actual
        if (params.anio)
            actual = Anio.get(params.anio)
        else
            actual = Anio.findByAnio(new Date().format("yyyy"))
        if (!actual)
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()


        [fuentes: fuentes, actual: actual, proyecto: proyecto]


    }
    def asignacionProyectov2 = {
        println "params " + params
        def proyecto = Proyecto.get(params.id)
        def asignaciones = []
        def actual
        if (params.anio)
            actual = Anio.get(params.anio)
        else
            actual = Anio.findByAnio(new Date().format("yyyy"))
        if (!actual)
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()
        MarcoLogico.findAll("from MarcoLogico where proyecto = ${proyecto.id} and tipoElemento=3 and estado=0").each {
            def asig = Asignacion.findAllByMarcoLogicoAndAnio(it, actual)
            if (asig)
                asignaciones += asig
        }

        [asignaciones: asignaciones, actual: actual, proyecto: proyecto]


    }

    def asignacionesCorrientes = {

        def unidad = UnidadEjecutora.get(params.id)
        def cinco = Actividad.findAll("from Actividad where codigo like '5%' order by codigo")
        def ocho = Actividad.findAll("from Actividad where codigo like '8%' order by codigo")
        def nueve = Actividad.findAll("from Actividad where codigo like '9%' order by codigo")
        def fuentes = Fuente.list([sort: 'descripcion'])
        def programas = ProgramaPresupuestario.list([sort: 'descripcion'])
        def tipoGastos = TipoGasto.list([sort: 'descripcion'])
        def actual
        if (params.anio)
            actual = Anio.get(params.anio)
        else
            actual = Anio.findByAnio(new Date().format("yyyy"))
        if (!actual)
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()

        [unidad: unidad, cinco: cinco, ocho: ocho, nueve: nueve, actual: actual, fuentes: fuentes, programas: programas, tipoGastos: tipoGastos]


    }

    def asignacionesCorrientesv2 = {

        def unidad = UnidadEjecutora.get(params.id)
        def fuentes = Fuente.list([sort: 'descripcion'])
        def programas = ProgramaPresupuestario.list([sort: 'descripcion'])
        def actual, programa
        if (params.anio) {
            actual = Anio.get(params.anio)
        } else {
            actual = Anio.findByAnio(new Date().format("yyyy"))
        }

        if (params.programa) {
            programa = ProgramaPresupuestario.get(params.programa)
        }

        if (!actual) {
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()
        }
        if (!programa) {
            programa = programas[0]
        }
//        def asignaciones = Asignacion.findAll("from Asignacion where anio=${actual.id} and unidad=${unidad.id} and marcoLogico is null and actividad is not null order by id")

        def c = Asignacion.createCriteria()
        def asignaciones = c.list {
            and {
                eq("anio", actual)
                eq("unidad", unidad)
                eq("programa", programa)
                isNull("marcoLogico")
            }
        }

        c = Asignacion.createCriteria()
        def asgs = c.list {
            and {
                eq("anio", actual)
                eq("unidad", unidad)
                isNull("marcoLogico")
            }
        }

        def total = 0
        asgs.each { asg ->
            total += ((asg.redistribucion == 0) ? asg.planificado.toDouble() : asg.redistribucion.toDouble())
        }



        def maxUnidad = PresupuestoUnidad.findByUnidadAndAnio(unidad, actual).maxCorrientes

//        println actual
//        println PresupuestoUnidad.findAllByUnidad(unidad)

        [unidad: unidad, actual: actual, asignaciones: asignaciones, fuentes: fuentes, programas: programas, programa: programa, totalUnidad: total, maxUnidad: maxUnidad]
    }




    def listaAsignaciones = {
        println "lista " + params
        params.max = Math.min(params.max ? params.int('max') : 25, 100)
        def asig = []
        if (params.parametro && params.parametro.trim().size() > 0) {
            def valor
            try {
                valor = params.parametro.toDouble()
            } catch (e) {
                valor = 0
            }
            if (valor > 0) {
                asig = Asignacion.findAllByPlanificadoGreaterThan(valor - 1, params)
            } else {
                def mls = MarcoLogico.findAllByTipoElementoAndObjetoIlike(TipoElemento.findByDescripcion("Actividad"), "%" + params.parametro + "%")
                def actvs = Actividad.findAllByDescripcionIlike("%" + params.parametro + "%")
                mls.each {
                    asig += Asignacion.findAllByMarcoLogico(it, params)
                }
                actvs.each {
                    asig += Asignacion.findAllByActividad(it, params)
                }

            }
        } else {
            asig = Asignacion.list(params)
        }


        [asig: asig, total: asig.count(), parametro: params.parametro]

    }


    def show = {
        def asignacionInstance = Asignacion.get(params.id)
        [asignacionInstance: asignacionInstance]
    }
    def form = {
        def title
        def asignacionInstance
        params.source = "edit"
        if (params.source == "create") {
            asignacionInstance = new Asignacion()
            asignacionInstance.properties = params
            title = g.message(code: "default.create.label", args: ["Asignaciones"], default: "Asignación")
        } else if (params.source == "edit") {
            asignacionInstance = Asignacion.get(params.id)
            if (!asignacionInstance) {
                flash.message = "No se encontro la asignación"
                redirect(action: "listaAsignaciones")
            }
            title = "Editar asignación"
        }

        return [asignacionInstance: asignacionInstance, title: title, source: params.source]
    }

    def save = {
        println "save " + params
        def asg = kerberosService.save(params, Asignacion, session.perfil, session.usuario)
        if (asg.errors.getErrorCount() != 0) {
            render(view: "form", model: [asignacionInstance: asg])
        } else {
            redirect(action: "pacAsignacion", params: [id: asg.id])
        }
    }

    def guardarAsignacion = {
        println "params guadr asignacion " + params
        params.planificado = params.planificado.toDouble()
        def asg
        if (params.id) {
            asg = Asignacion.get(params.id)
            asg.properties = params
        } else {
            asg = new Asignacion(params)
        }
//        def asignaciones = Asignacion.findAllByMarcoLogicoAndAnio(asg.marcoLogico,asg.anio)
        //        println "asignaciones "+asignaciones

        asg = kerberosService.saveObject(asg, Asignacion, session.perfil, session.usuario, "guardarAsignacion", "asignacion", session)
        if (asg.errors.getErrorCount() == 0) {
            def total = (asg.redistribucion == 0) ? (asg.planificado) : (asg.redistribucion)
            def valor = (total / 12).toFloat().round(2)
            def residuo = 0
            if (valor * 12 != total) {
                residuo = (total.toDouble() - valor.toDouble() * 12).toFloat().round(2)
            }
            println "total " + total + " valor " + valor + " res " + residuo
//            println "calc "+ (valor.toDouble()*12)
//            println "calc 2 "+ (total-valor*12).toFloat().round(2)

            12.times {
                def mes = Mes.get(it + 1)
                ProgramacionAsignacion.findByAsignacionAndMes(asg, mes)?.delete(flush: true)
                def programacion = new ProgramacionAsignacion()
                programacion.asignacion = asg
                programacion.mes = mes
                if (it < 11) {
                    programacion.valor = valor
                } else {
                    programacion.valor = valor + residuo
                }
                programacion = kerberosService.saveObject(programacion, ProgramacionAsignacion, session.perfil, session.usuario, "guardarAsignacion", "asignacion", session)
            }
            render asg.id
        } else {
            render 0
        }


    }

    def programacionAsignaciones = {
        def actual
        if (params.anio)
            actual = Anio.get(params.anio)
        else
            actual = Anio.findByAnio(new Date().format("yyyy"))
        if (!actual)
            actual = Anio.list([sort: 'anio', order: 'desc']).pop()
        def unidad = UnidadEjecutora.get(params.id)
        def asgProy = Asignacion.findAll("from Asignacion where unidad=${unidad.id} and marcoLogico is not null and anio=${actual.id} order by id")
        def asgCor = Asignacion.findAll("from Asignacion where unidad=${unidad.id} and actividad is not null and anio=${actual.id} and marcoLogico is null order by id")
        def meses = []
        12.times {meses.add(it + 1)}
        [unidad: unidad, corrientes: asgCor, inversiones: asgProy, actual: actual, meses: meses]
    }

    def guardarProgramacion = {
        println "params " + params
        def asig = Asignacion.get(params.asignacion)
        def datos = params.datos.split(";")
        datos.each {
            def partes = it.split(":")
            def prog = ProgramacionAsignacion.findByAsignacionAndMes(asig, Mes.get(partes[0]))
            prog.valor = partes[1].toDouble()
            prog = kerberosService.saveObject(prog, ProgramacionAsignacion, session.perfil, session.usuario, "guardarProgramacion", "asignacion", session)
        }
        render "ok"
    }


    def nuevaAsignacionGastoCorriente = {

    }
    def buscarPresupuesto = {
        println "buscar " + params
        def prsp = []
        if (!params.tipo) {
            if (params.parametro && params.parametro.trim().size() > 0) {
                prsp = Presupuesto.findAll("from Presupuesto where numero like '%${params.parametro}%'  and movimiento=1 order by numero")
            } else {
                println "aqui "
                prsp = Presupuesto.findAllByMovimiento(1, [sort: "numero", max: 20])
            }
        } else {
            if (params.tipo == "1") {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    prsp = Presupuesto.findAll("from Presupuesto where numero like '%${params.parametro}%' and movimiento=1 order by numero")
                } else {
                    prsp = Presupuesto.findAllByMovimiento(1, [sort: "numero", max: 20])
                }
            } else {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    prsp = Presupuesto.findAll("from Presupuesto where descripcion like '%${params.parametro}%' and movimiento=1 order by numero")
                } else {
                    prsp = Presupuesto.findAllByMovimiento(1, [sort: "descripcion", max: 20])
                }
            }
        }
        [prsp: prsp]
    }

    def guardarAsignacionGastoCorriente = {
        println "save " + params
        def asg = kerberosService.save(params, Asignacion, session.perfil, session.usuario)
        if (asg.errors.getErrorCount() != 0) {
            render(view: "nuevaAsignacionGastoCorriente", model: [asignacionInstance: asg])
        } else {
            redirect(action: "pacAsignacion", params: [id: asg.id])
        }
    }

    def pacAsignacion = {
        def asignacion = Asignacion.get(params.id)
        def pac = Obra.findAllByAsignacion(asignacion)
        [asignacion: asignacion, obras: pac]
    }

    def buscarCcp = {
        println "buscar " + params
        def ccps = []
        if (!params.tipo) {
            if (params.parametro && params.parametro.trim().size() > 0) {
                ccps = CodigoComprasPublicas.findAll("from CodigoComprasPublicas where numero like '%${params.parametro}%'  and movimiento=1 order by numero")
            } else {
                println "aqui "
                ccps = CodigoComprasPublicas.findAllByMovimiento(1, [sort: "numero", max: 20])
            }
        } else {
            if (params.tipo == "1") {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    ccps = CodigoComprasPublicas.findAll("from CodigoComprasPublicas where numero like '%${params.parametro}%' and movimiento=1 order by numero")
                } else {
                    ccps = CodigoComprasPublicas.findAllByMovimiento(1, [sort: "numero", max: 20])
                }
            } else {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    ccps = CodigoComprasPublicas.findAll("from CodigoComprasPublicas where descripcion like '%${params.parametro.toUpperCase()}%' and movimiento=1 order by numero")
                } else {
                    ccps = CodigoComprasPublicas.findAllByMovimiento(1, [sort: "descripcion", max: 20])
                }
            }
        }
        [ccps: ccps]
    }


    def buscarActividad = {
        println "buscar act " + params
        def acts = []
        if (!params.tipo) {
            if (params.parametro && params.parametro.trim().size() > 0) {
                acts = Actividad.findAll("from Actividad where codigo like '%${params.parametro}%'   order by codigo")
            } else {
                println "aqui "
                acts = Actividad.list([sort: "codigo", max: 20])
            }
        } else {
            if (params.tipo == "1") {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    acts = Actividad.findAll("from Actividad where codigo like '%${params.parametro}%'  order by codigo")
                } else {
                    acts = Actividad.list([sort: "codigo", max: 20])
                }
            } else {
                if (params.parametro && params.parametro.trim().size() > 0) {
                    acts = Actividad.findAll("from Actividad where descripcion like '%${params.parametro}%'  order by descripcion")
                } else {
                    acts = Actividad.list([sort: "descripcion", max: 20])
                }
            }
        }
        [acts: acts]
    }


}
